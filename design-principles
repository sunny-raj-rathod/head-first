Identify the aspects of your application that vary and separate them from what stays the same. - Take the part that varies and encapsulate them, so that later you can alter the parts that vary without affecting those that don't.
Program to an interface, not an implementation - meaning program to a supertype - the declared type of variable should always be an abstract class or an interface, so that the objects assigned to those variables can be of any concrete implementation of the supertype so that the class implementing those does not need to know about the type.
Favour composition over inheritance - gives more flexibility, not only lets you encapsulate behaviour into separate classes but also lets you change behaviour at runtime.
^^^^^Strategy pattern - defines a set of algorithms, encapsulates each one and makes them interchangeable. Lets the algorithm vary independently from clients that use it.

Strive for loosely coupled designs between objects that interact.
^^^^^Observer pattern - defines a one-to-many dependency between objects, so that if one object state changes, all its dependents are notified and updated automatically.

Classes should be open for extension but closed for modification.
^^^^^Decorator pattern - attaches additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality.

Depend upon abstractions. Do not depend on concrete classes. - Any higher level component should not be dependent on lower level components
Following guidelines can help you to avoid OO designs which violate the dependency inversion principle:
1. No variable should hold a reference to concrete class
2. No class should derive from a concrete class
3. No method should override an implemented method of any of its base classes
^^^^^Factory Method pattern  - defines an interface for creating an object, but lets subclasses decide which class to instantiate - Lets a class defer instantiation to subclasses.
^^^^^Abstract Factory pattern - provides an interface for creating families of related or dependent objects without specifying their concrete classes.

^^^^^Singleton Pattern - ensures that class only has one instance and it provides a global point of access to it.

^^^^^Command Pattern - encapsulates a request as an object, thereby letting you parameterize other objects with different requests, queue or log requests and support undoable operations.

^^^^^Adapter Pattern - converts an interface of a class into another interface that client excepts. It lets classes work together that could not otherwise due to incompatible interfaces.

Principle of least knowledge - Talk only to your immediate friends.
This principle provides guidelines that:
Take an object, now from any method in that object, we should invoke methods that belong to:
1. The object itself
2. Objects passed in as parameter to method
3. Any object the method creates or instantiates
4. Any components of the object.
This prevents us from creating designs that have a large number of classes coupled together so that changes in one part of the system cascades to other parts.
^^^^^Facade Pattern - provides a unified interface to a set of interfaces in a subsystem. Facade defines a higher level interface that makes subsystem easy to use.

The hollywood principle - Don't call us, we'll call you. - This prevents Dependency rot. - This principle allows low level components to hook themselves into a system, but the higher level components determine when they are needed and how.
^^^^^Template Method - defines the skeleton of an algorithm in a method deferring some steps to subclasses. Template method lets subclasses redefine certain steps of the algorithm without changing the algorithm's structure.

^^^^^Iterator pattern - provides a way to access an aggregate object sequentially without exposing its underlying implementation.

A class should have only one reason to change. Classes that have only single responsibility have high cohesion, whereas the classes which handle multiple responsibilities have low cohesion.
^^^^^Composite Pattern - allows you to compose objects into tree structures which represent part-whole hierarchies. Composite lets client treat individual objects and composition of objects uniformly.


^^^^^State Pattern - allows an object to alter its behaviour when its internal state changes. Object will appear to change its class.

^^^^^Proxy pattern - provides a surrogate or placeholder for another object to control access to it.

^^^^^MVC pattern -
is a compound pattern, which utilizes Observer, Strategy and Composite patterns
Model utilizes Observer pattern, so that it can keep observers updated about the state yet stay decoupled from them.
Controller is the strategy for the view. The view can use different implementations of the controller to get different behaviour.
View uses Composite pattern to implement the UI.
